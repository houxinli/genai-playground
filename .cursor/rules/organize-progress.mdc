---
description: 整理进展
alwaysApply: false
---
# 工作流程规则 (Workflow Rules)

## 📋 "整理进展" 指令执行流程

当用户说"整理进展"时，按以下步骤执行：

### 1. 检查当前状态
```bash
# 检查 git 状态
git status
git diff --name-only
git diff --stat
```

### 2. 分析变更内容
- 查看修改的文件类型和数量
- 识别主要变更类别（文档、脚本、配置等）
- 统计新增/删除行数

### 3. 更新项目日志
- 在 `docs/journal/` 目录下创建或更新当天的日志文件
- 格式：`YYYY-MM-DD.md`
- 记录：
  - 主要完成的工作
  - 解决的问题和方案
  - 技术改进和优化
  - 遇到的卡点和解决方案

### 4. 更新相关文档
- 更新 `docs/AGENT_CONTEXT.md` 反映最新项目状态
- 更新 `docs/README.md` 如有重大变更
- 更新相关技术文档

### 5. 清理敏感信息
**必须检查并清理以下敏感信息：**
- 机器路径：`/mnt/shengdata1/[用户名]` → `$HF_HOME` 或 `/path/to/your/...`
- 用户名：`[用户名]` → 删除或泛化
- 具体作品ID：`[作品ID]` → `[作品ID]`
- 具体文件名：`[文章ID]_[章节ID].txt` → `[文章ID]_[章节ID].txt`
- 环境路径：`/home/[用户名]/.conda/envs/llm` → `/path/to/your/conda/envs/llm`

### 6. 准备 Commit Message
**格式要求：**
```
简短标题（50字符内）

主要变更：
- 变更类别1：具体描述
- 变更类别2：具体描述
- 变更类别3：具体描述

详细变更：
- 文件级别的具体变更
- 功能增强和优化
- 问题修复

技术改进：
- 新增功能
- 性能优化
- 架构改进
```

### 7. 执行提交
```bash
# 添加所有变更
git add .

# 检查暂存状态
git status

# 执行提交
git commit -m "详细的commit message"

# 确认提交
git log --oneline -3
```

## 📝 日志记录规范

### 日志文件命名
- 格式：`YYYY-MM-DD.md`
- 位置：`docs/journal/`
- 索引：更新 `docs/journal/README.md`

### 日志内容结构
```markdown
# YYYY-MM-DD 工作日志

## 🎯 今日目标
- 目标1
- 目标2

## ✅ 完成工作
### 主要功能
- 功能描述

### 问题解决
- 问题描述
- 解决方案

### 技术改进
- 改进内容

## 🔧 技术细节
### 配置变更
- 变更内容

### 脚本优化
- 优化内容

## 📊 测试结果
- 测试内容
- 结果分析

## 🚧 遇到的问题
- 问题描述
- 解决过程

## 📋 明日计划
- 计划1
- 计划2
```

## 🔒 敏感信息清理检查清单

### 必须清理的内容
- [ ] 机器路径（`/mnt/shengdata1/[用户名]`）
- [ ] 用户名（`[用户名]`）
- [ ] 具体作品ID（`[作品ID]`）
- [ ] 具体文件名（`[文章ID]_[章节ID].txt`）
- [ ] 环境路径（`/home/[用户名]/.conda/envs/llm`）
- [ ] 维护者信息（`**维护者**: [用户名]`）
- [ ] 具体内容ID（`[文章ID]_[章节ID]`）

### 泛化规则
- 路径 → `$HF_HOME` 或 `/path/to/your/...`
- 作品ID → `[作品ID]`
- 文件名 → `[文章ID]_[章节ID].txt`
- 用户名 → 删除或使用 `[用户名]`

## 📈 Commit Message 模板

### 功能开发
```
feat(模块): 简短描述新功能

主要变更：
- 新增功能：具体描述
- 优化改进：具体描述

详细变更：
- 文件1：变更内容
- 文件2：变更内容

技术改进：
- 新增功能点
- 性能优化
- 用户体验改进
```

### 问题修复
```
fix(模块): 简短描述修复内容

主要变更：
- 问题修复：具体描述
- 优化改进：具体描述

详细变更：
- 修复文件：修复内容
- 相关文件：调整内容

技术改进：
- 错误处理
- 稳定性提升
- 代码质量改进
```

### 重构优化
```
refactor(模块): 简短描述重构内容

主要变更：
- 结构重构：具体描述
- 代码优化：具体描述

详细变更：
- 重构文件：重构内容
- 优化文件：优化内容

技术改进：
- 架构改进
- 性能优化
- 可维护性提升
```

## 🎯 执行检查清单

当用户说"整理进展"时，按顺序执行：

1. [ ] 检查 git 状态
2. [ ] 分析变更内容
3. [ ] 更新项目日志
4. [ ] 更新相关文档
5. [ ] 清理敏感信息
6. [ ] 准备 commit message
7. [ ] 执行提交
8. [ ] 确认提交结果

## 💡 注意事项

- 始终优先清理敏感信息
- 保持日志的连续性和完整性
- Commit message 要详细且有意义
- 确保所有变更都被正确记录
- 保持文档结构的一致性# 工作流程规则 (Workflow Rules)

## 📋 "整理进展" 指令执行流程

当用户说"整理进展"时，按以下步骤执行：

### 1. 检查当前状态
```bash
# 检查 git 状态
git status
git diff --name-only
git diff --stat
```

### 2. 分析变更内容
- 查看修改的文件类型和数量
- 识别主要变更类别（文档、脚本、配置等）
- 统计新增/删除行数

### 3. 更新项目日志
- 在 `docs/journal/` 目录下创建或更新当天的日志文件
- 格式：`YYYY-MM-DD.md`
- 记录：
  - 主要完成的工作
  - 解决的问题和方案
  - 技术改进和优化
  - 遇到的卡点和解决方案

### 4. 更新相关文档
- 更新 `docs/AGENT_CONTEXT.md` 反映最新项目状态
- 更新 `docs/README.md` 如有重大变更
- 更新相关技术文档

### 5. 清理敏感信息
**必须检查并清理以下敏感信息：**
- 机器路径：`/mnt/shengdata1/[用户名]` → `$HF_HOME` 或 `/path/to/your/...`
- 用户名：`[用户名]` → 删除或泛化
- 具体作品ID：`[作品ID]` → `[作品ID]`
- 具体文件名：`[文章ID]_[章节ID].txt` → `[文章ID]_[章节ID].txt`
- 环境路径：`/home/[用户名]/.conda/envs/llm` → `/path/to/your/conda/envs/llm`

### 6. 准备 Commit Message
**格式要求：**
```
简短标题（50字符内）

主要变更：
- 变更类别1：具体描述
- 变更类别2：具体描述
- 变更类别3：具体描述

详细变更：
- 文件级别的具体变更
- 功能增强和优化
- 问题修复

技术改进：
- 新增功能
- 性能优化
- 架构改进
```

### 7. 执行提交
```bash
# 添加所有变更
git add .

# 检查暂存状态
git status

# 执行提交
git commit -m "详细的commit message"

# 确认提交
git log --oneline -3
```

## 📝 日志记录规范

### 日志文件命名
- 格式：`YYYY-MM-DD.md`
- 位置：`docs/journal/`
- 索引：更新 `docs/journal/README.md`

### 日志内容结构
```markdown
# YYYY-MM-DD 工作日志

## 🎯 今日目标
- 目标1
- 目标2

## ✅ 完成工作
### 主要功能
- 功能描述

### 问题解决
- 问题描述
- 解决方案

### 技术改进
- 改进内容

## 🔧 技术细节
### 配置变更
- 变更内容

### 脚本优化
- 优化内容

## 📊 测试结果
- 测试内容
- 结果分析

## 🚧 遇到的问题
- 问题描述
- 解决过程

## 📋 明日计划
- 计划1
- 计划2
```

## 🔒 敏感信息清理检查清单

### 必须清理的内容
- [ ] 机器路径（`/mnt/shengdata1/[用户名]`）
- [ ] 用户名（`[用户名]`）
- [ ] 具体作品ID（`[作品ID]`）
- [ ] 具体文件名（`[文章ID]_[章节ID].txt`）
- [ ] 环境路径（`/home/[用户名]/.conda/envs/llm`）
- [ ] 维护者信息（`**维护者**: [用户名]`）
- [ ] 具体内容ID（`[文章ID]_[章节ID]`）

### 泛化规则
- 路径 → `$HF_HOME` 或 `/path/to/your/...`
- 作品ID → `[作品ID]`
- 文件名 → `[文章ID]_[章节ID].txt`
- 用户名 → 删除或使用 `[用户名]`

## 📈 Commit Message 模板

### 功能开发
```
feat(模块): 简短描述新功能

主要变更：
- 新增功能：具体描述
- 优化改进：具体描述

详细变更：
- 文件1：变更内容
- 文件2：变更内容

技术改进：
- 新增功能点
- 性能优化
- 用户体验改进
```

### 问题修复
```
fix(模块): 简短描述修复内容

主要变更：
- 问题修复：具体描述
- 优化改进：具体描述

详细变更：
- 修复文件：修复内容
- 相关文件：调整内容

技术改进：
- 错误处理
- 稳定性提升
- 代码质量改进
```

### 重构优化
```
refactor(模块): 简短描述重构内容

主要变更：
- 结构重构：具体描述
- 代码优化：具体描述

详细变更：
- 重构文件：重构内容
- 优化文件：优化内容

技术改进：
- 架构改进
- 性能优化
- 可维护性提升
```

## 🎯 执行检查清单

当用户说"整理进展"时，按顺序执行：

1. [ ] 检查 git 状态
2. [ ] 分析变更内容
3. [ ] 更新项目日志
4. [ ] 更新相关文档
5. [ ] 清理敏感信息
6. [ ] 准备 commit message
7. [ ] 执行提交
8. [ ] 确认提交结果

## 💡 注意事项

- 始终优先清理敏感信息
- 保持日志的连续性和完整性
- Commit message 要详细且有意义
- 确保所有变更都被正确记录
- 保持文档结构的一致性