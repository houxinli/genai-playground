---
description: 整理进展
alwaysApply: false
---
# 工作流程规则 (Workflow Rules)

## 📋 "整理进展" 指令执行流程

当用户说"整理进展"时，按以下步骤执行：

### 1. 检查当前状态
```bash
# 检查 git 状态
git status
git diff --name-only
git diff --stat
```

### 2. 分析变更内容
- 查看修改的文件类型和数量
- 识别主要变更类别（文档、脚本、配置等）
- 统计新增/删除行数

#### 2.1 逐文件代码变更分析（必须执行）
- 生成逐文件列表与概览：
  ```bash
  # 文件列表与变更类型/规模
  git diff --name-status
  git diff --numstat | sed 's/\t/  /g'
  ```
- 提取单文件详细上下文（按需对重点文件执行）：
  ```bash
  # 查看最近一次修改记录与提交说明
  FILE=path/to/file.py; git log -n 1 --date=iso --stat -- "$FILE" | cat

  # 查看精细差异（便于总结具体修改点）
  git diff --word-diff=porcelain -- "$FILE" | cat

  # 查看变更行责任（定位逻辑风险点）
  git blame -w -- "$FILE" | head -200 | cat
  ```
- 汇总每个文件的要点（写入日志“变更明细/按文件”小节）：
  - 变更类型：新增/修改/删除
  - 主要改动：新增函数/接口变更/核心逻辑调整/边界条件处理
  - 影响范围：调用方、API、CLI、任务脚本、测试
  - 风险评估：回归点、性能影响、并发/IO/内存风险
  - 覆盖情况：是否补充/更新测试用例

#### 2.2 基于文件日志/时间戳推断工作时间（建议执行）
- Git 维度（提交与编辑活动）：
  ```bash
  # 查看时间窗口内的提交与文件触达
  git log --since="yesterday" --until="now" --date=iso --name-only --pretty=format:"%ad %h %s" | cat

  # 统计时间窗口内的修改强度
  git diff --stat HEAD@{1.day.ago}..HEAD | cat
  ```
- 文件系统维度（最近编辑痕迹，非 Git 跟踪亦可见）：
  ```bash
  # 列出最近 N 小时内被修改的文件（含未纳入 Git 的工作文件）
  find . -type f -not -path "*/.git/*" -mmin -360 -printf "%TY-%Tm-%Td %TH:%TM  %p\n" | sort | cat
  ```
- 粗粒度时段聚合建议：
  - 以 30 分钟为间隔，将连续活动聚为一个工作时段
  - 起止时间取该时段内最早与最晚的触达时间
  - 记录每个时段的主文件/任务标签（如：翻译解析、测试补充、数据清洗）
  - 在日志“工作时段统计”小节中填写

### 3. 更新项目日志
- 在 `docs/journal/` 目录下创建或更新当天的日志文件
- 格式：`YYYY-MM-DD.md`
- 记录：
  - 主要完成的工作
  - 解决的问题和方案
  - 技术改进和优化
  - 遇到的卡点和解决方案

### 4. 更新相关文档
- 更新 `docs/AGENT_CONTEXT.md` 反映最新项目状态
- 更新 `docs/README.md` 如有重大变更
- 更新相关技术文档

### 5. 清理敏感信息
**必须检查并清理以下敏感信息：**
- 机器路径：`/mnt/shengdata1/[用户名]` → `$HF_HOME` 或 `/path/to/your/...`
- 用户名：`[用户名]` → 删除或泛化
- 具体作品ID：`[作品ID]` → `[作品ID]`
- 具体文件名：`[文章ID]_[章节ID].txt` → `[文章ID]_[章节ID].txt`
- 环境路径：`/home/[用户名]/.conda/envs/llm` → `/path/to/your/conda/envs/llm`

### 6. 清理冗余文件
**检查并清理项目根目录的冗余文件：**
- 检查项目根目录是否有临时文件、测试文件、重复文件
- 识别以下类型的冗余文件：
  - 临时文件：`*.tmp`, `*.temp`, `*.log`
  - 测试文件：`test_*.py`, `*_test.py`（如果不在测试目录中）
  - 重复文件：相同功能的多个版本
  - 调试文件：`debug_*.py`, `*_debug.py`
  - 迁移文件：`migrate_*.py`（迁移完成后应删除）
- 提示用户确认删除或移动到合适位置

### 7. 更新包版本管理文件
**检查并更新依赖管理文件：**
- 检查 `requirements.txt` 或 `requirements-*.txt` 文件
- 识别新增的依赖包：
  - 检查代码中新增的 `import` 语句
  - 识别新使用的第三方库
  - 检查是否有未记录的依赖
- 更新依赖文件：
  - 添加新依赖包及其版本
  - 更新现有包的版本（如有必要）
  - 移除不再使用的依赖
- 确保版本兼容性：
  - 检查版本冲突
  - 验证依赖关系
  - 记录版本更新原因

### 8. 准备 Commit Message
**格式要求：**
```
简短标题（50字符内）

主要变更：
- 变更类别1：具体描述
- 变更类别2：具体描述
- 变更类别3：具体描述

详细变更：
- 文件级别的具体变更
- 功能增强和优化
- 问题修复

技术改进：
- 新增功能
- 性能优化
- 架构改进
```

### 9. 执行提交
```bash
# 添加所有变更
git add .

# 检查暂存状态
git status

# 执行提交
git commit -m "详细的commit message"

# 确认提交
git log --oneline -3
```

## 📝 日志记录规范

### 日志文件命名
- 格式：`YYYY-MM-DD.md`
- 位置：`docs/journal/`
- 索引：更新 `docs/journal/README.md`

### 日志内容结构
```markdown
# YYYY-MM-DD 工作日志

## 🎯 今日目标
- 目标1
- 目标2

## ✅ 完成工作
### 主要功能
- 功能描述

### 问题解决
- 问题描述
- 解决方案

### 技术改进
- 改进内容

### 变更明细（按文件）
- 文件：`path/to/file.py`
  - 变更类型：新增/修改/删除
  - 主要改动：概要描述
  - 影响范围：调用方/CLI/API/测试
  - 风险与回归点：概要描述
  - 覆盖情况：测试新增/更新/待补

## 🔧 技术细节
### 配置变更
- 变更内容

### 脚本优化
- 优化内容

## ⏱️ 工作时段统计（基于 Git 与文件时间）
- 时段1：HH:MM–HH:MM（任务标签）→ 关键文件/目录
- 时段2：HH:MM–HH:MM（任务标签）→ 关键文件/目录
- 合计用时：X 小时（估算方法：30 分钟间隔聚合）

## 📊 测试结果
- 测试内容
- 结果分析

## 🚧 遇到的问题
- 问题描述
- 解决过程

## 📋 明日计划
- 计划1
- 计划2
```

## 🔒 敏感信息清理检查清单

### 必须清理的内容
- [ ] 机器路径（`/mnt/shengdata1/[用户名]`）
- [ ] 用户名（`[用户名]`）
- [ ] 具体作品ID（`[作品ID]`）
- [ ] 具体文件名（`[文章ID]_[章节ID].txt`）
- [ ] 环境路径（`/home/[用户名]/.conda/envs/llm`）
- [ ] 维护者信息（`**维护者**: [用户名]`）
- [ ] 具体内容ID（`[文章ID]_[章节ID]`）

### 泛化规则
- 路径 → `$HF_HOME` 或 `/path/to/your/...`
- 作品ID → `[作品ID]`
- 文件名 → `[文章ID]_[章节ID].txt`
- 用户名 → 删除或使用 `[用户名]`

## 🗂️ 冗余文件清理检查清单

### 需要检查的文件类型
- [ ] 临时文件（`*.tmp`, `*.temp`, `*.log`）
- [ ] 测试文件（`test_*.py`, `*_test.py`）
- [ ] 调试文件（`debug_*.py`, `*_debug.py`）
- [ ] 迁移文件（`migrate_*.py`）
- [ ] 重复文件（相同功能的多个版本）
- [ ] 项目根目录的孤立文件

### 清理策略
- **删除**：临时文件、调试文件、迁移完成后的文件
- **移动**：测试文件移动到 `tests/` 目录
- **合并**：重复文件合并为一个
- **归档**：历史文件移动到 `archive/` 目录

## 📦 包版本管理检查清单

### 依赖检查
- [ ] 检查代码中的新 `import` 语句
- [ ] 识别新增的第三方库
- [ ] 检查未记录的依赖
- [ ] 验证依赖版本兼容性

### 文件更新
- [ ] 更新 `requirements.txt`
- [ ] 更新 `requirements-*.txt`（如有）
- [ ] 更新 `pyproject.toml`（如有）
- [ ] 更新 `setup.py`（如有）

### 版本管理
- [ ] 记录版本更新原因
- [ ] 检查版本冲突
- [ ] 验证依赖关系
- [ ] 测试新版本兼容性

## 📈 Commit Message 模板

### 功能开发
```
feat(模块): 简短描述新功能

主要变更：
- 新增功能：具体描述
- 优化改进：具体描述

详细变更：
- 文件1：变更内容
- 文件2：变更内容

技术改进：
- 新增功能点
- 性能优化
- 用户体验改进
```

### 问题修复
```
fix(模块): 简短描述修复内容

主要变更：
- 问题修复：具体描述
- 优化改进：具体描述

详细变更：
- 修复文件：修复内容
- 相关文件：调整内容

技术改进：
- 错误处理
- 稳定性提升
- 代码质量改进
```

### 重构优化
```
refactor(模块): 简短描述重构内容

主要变更：
- 结构重构：具体描述
- 代码优化：具体描述

详细变更：
- 重构文件：重构内容
- 优化文件：优化内容

技术改进：
- 架构改进
- 性能优化
- 可维护性提升
```

### 清理维护
```
chore(模块): 简短描述清理内容

主要变更：
- 文件清理：具体描述
- 依赖更新：具体描述

详细变更：
- 删除文件：清理内容
- 更新依赖：版本信息

技术改进：
- 项目结构优化
- 依赖管理改进
- 代码质量提升
```

## 🎯 执行检查清单

当用户说"整理进展"时，按顺序执行：

1. [ ] 检查 git 状态
2. [ ] 分析变更内容
3. [ ] 更新项目日志
4. [ ] 更新相关文档
5. [ ] 清理敏感信息
6. [ ] 清理冗余文件
7. [ ] 更新包版本管理文件
8. [ ] 准备 commit message
9. [ ] 执行提交
10. [ ] 确认提交结果

## 💡 注意事项

- 始终优先清理敏感信息
- 保持日志的连续性和完整性
- Commit message 要详细且有意义
- 确保所有变更都被正确记录
- 保持文档结构的一致性
- 定期清理冗余文件，保持项目整洁
- 及时更新依赖管理，确保环境一致性